/**
 * DEVELOPMENT WEBPACK CONFIGURATION
 */

const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');
const OfflinePlugin = require('offline-plugin');

const createStyledComponentsTransformer = require('typescript-plugin-styled-components').default;
const styledComponentsTransformer = createStyledComponentsTransformer();

module.exports = require('./webpack.base.babel')({
    mode: 'development',

    // Add hot reloading in development
    entry: [
        require.resolve('react-app-polyfill/ie11'),
        'webpack-hot-middleware/client?reload=true',
        path.join(process.cwd(), 'app/app.tsx'), // Start with js/app.js
    ],

    // Don't use hashes in dev mode for better performance
    output: {
        filename: '[name].js',
        chunkFilename: '[name].chunk.js',
    },

    optimization: {
        splitChunks: {
            chunks: 'all',
        },
    },

    // Add development plugins
    plugins: [
        new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
        new HtmlWebpackPlugin({
            inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
            template: 'app/index.html',
        }),
        new CircularDependencyPlugin({
            exclude: /a\.js|node_modules/, // exclude node_modules
            failOnError: false, // show a warning when there is a circular dependency
        }),
        new OfflinePlugin({
            relativePaths: false,
            publicPath: 'auto',
            appShell: '/',

            // No need to cache .htaccess. See http://mxs.is/googmp,
            // this is applied before any match in `caches` section
            excludes: ['.htaccess'],

            caches: {
                main: [':rest:'],

                // All chunks marked as `additional`, loaded after main section
                // and do not prevent SW to install. Change to `optional` if
                // do not want them to be preloaded at all (cached only when first loaded)
                additional: ['*.chunk.js'],
            },

            // Removes warning for about `additional` section usage
            safeToUseOptionalCaches: true,
        }),
    ],

    tsLoaders: [
        { loader: 'babel-loader' }, // using babel after typescript transpiles to target es6
        {
            loader: 'ts-loader',
            options: {
                transpileOnly: true, // fork-ts-checker-webpack-plugin is used for type checking
                logLevel: 'info',
                getCustomTransformers: () => ({
                    before: [styledComponentsTransformer],
                }),
            },
        },
    ],

    // Emit a source map for easier debugging
    // See https://webpack.js.org/configuration/devtool/#devtool
    devtool: 'eval-source-map',

    performance: {
        hints: false,
    },
});
